from tkinter import *
from tkinter import ttk
from PIL import Image,ImageTk
from tkinter import messagebox
import mysql.connector
from time import strftime
from datetime import datetime
import cv2
import os
import numpy as np


class face_recog:
    def __init__(self,root):
        self.root=root
        self.root.geometry("1366x768+0+0")
        self.root.title("Face Recognition")

        title_lbl=Label(root,text="Face Recognition",font=("times new roman",35,"bold"),bg="black",fg="red")
        title_lbl.place(x=0,y=0,width=1366,height=45)

        # Showing first image........................................
        img=Image.open("face_images/Facial-recognition2.jpg")
        img=img.resize((650,700),Image.ANTIALIAS)
        self.photoimg=ImageTk.PhotoImage(img)

        f_label=Label(self.root,image=self.photoimg)
        f_label.place(x=0,y=45,width=650,height=700)

    

        # Showing second image..............................
        img1=Image.open("face_images/face_reco.jpg")
        img1=img1.resize((710,700),Image.ANTIALIAS)
        self.photoimg1=ImageTk.PhotoImage(img1)

        s_label=Label(self.root,image=self.photoimg1)
        s_label.place(x=650,y=45,width=710,height=700)

    #============button
        save_btn=Button(s_label,text="Face Recognition",command=self.face_recognition,font=("new times roman",14 ,"bold"),bg="blue",fg="white")
        save_btn.place(x=260,y=500,width=200,height=50)


  #============Attendence
    def mark_atten(self,i,r,n,d,s):
        with open("student.csv","r+",newline="\n") as f: 
            myDataList=f.readlines()
            name_list=[]
            for line in myDataList:
                entry=line.split(",")
                name_list.append(entry=[0])
            if ((i not in name_list) and (r not in name_list) and (n not in name_list) and (d not in name_list) and (s not in name_list)):
                now=datetime.now()
                d1=now.strftime("%d/%m/%Y")
                dtString=now.strftime("%H:%M:%S")
                f.writelines(f"\n{i},{r},{n},{d},{s},{dtString},{d1},Present")




    #===========recogintion=========
    def face_recognition(self):
        def draw_boundary(img,classifier,scaleFactor,minNeighbors,color,text,clf):
            gray_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            features=classifier.detectMultiScale(gray_img,scaleFactor,minNeighbors)

            coord=[]

            for(x,y,w,h) in features:
                cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),3)
                id,predict=clf.predict(gray_img[y:y+h,x:x+w])
                confidence=((100*(1-predict/300)))

                #===CONNECTING DATABASE

                con=mysql.connector.connect(host="localhost",username="root",password="root",database="face_recognition")
                my_cursor=con.cursor()

                #===access name
                my_cursor.execute("select name from student_details where id="+(id))
                n=my_cursor.fetchone()
                n="+".join(n)
                
                #===access roll no
                my_cursor.execute("select roll_no from student_details where id="+(id))
                r=my_cursor.fetchone()
                r="+".join(r)

                # access department
                my_cursor.execute("select dep from student_details where id="+(id))
                d=my_cursor.fetchone()
                d="+".join(d)

                # access semester
                my_cursor.execute("select sem from student_details where id="+(id))
                s=my_cursor.fetchone()
                s="+".join(s)

                 # access semester
                my_cursor.execute("select id from student_details where id="+(id))
                i=my_cursor.fetchone()
                i="+".join(i)



                if confidence>77:
                    cv2.putText(img,f"ID:{i}",(x,y-75),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)
                    cv2.putText(img,f"Roll:{r}",(x,y-55),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)
                    cv2.putText(img,f"Name:{n}",(x,y-40),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)
                    cv2.putText(img,f"Department:{d}",(x,y-25),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)
                    cv2.putText(img,f"Semester:{s}",(x,y-10),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)
                    self.mark_atten(i, r, n, d, s)
                else:
                    cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),3)
                    cv2.putText(img,"Unknown face",(x,y-5),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)

                    coord=[x,y,w,h]

                return coord

        def recognize(img,clf,faceCascade):
            coord=draw_boundary(img, faceCascade,1.1,10, (255,255,255), "Face", clf)
            return img

            faceCascade=cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
            clf=cv2.face.LBPHFaceRecognizer_create()
            clf.read("classifier.xml")

            video_cap=cv2.VideoCapture(0)
            while True:
                ret,img=video_cap.read()
                img=recognize(img, clf, faceCascade)
                cv2.imshow("Welcome to face Recognition",img)

                if cv2.waitKey(1)==13:
                    break
            video_cap.release()
            cv2.destroyAllWindows()



if __name__ == "__main__":
    root=Tk()
    obj=face_recog(root)
    root.mainloop()
